#!/bin/sh
set -xe

# Type any extra commands inside this function. They will run last.
extra_commands() {
  apk --no-cache add byobu musl-locales neovim
  byobu-enable
  ln -sf "$(command -v nvim)" /usr/local/bin/vim
}

create_executable() {
	filename="$1"
  create_file "${filename}"
  chmod +x "${filename}"
}

create_file() {
  filename="$1"
  mkdir -p "$(dirname "${filename}")"
  cat > "${filename}"
}

create_file_if_not_exists() {
	filename="$1"
	if [ ! -e "${filename}" ]; then
    create_file "${filename}"
	else
	  cat > /dev/null
	fi
}

enable_service() {
	name="$1"
	rc-update add "${name}" boot
}

create_service() {
	name="$1"
	create_executable "/etc/init.d/${name}"
	enable_service "${name}"
}

create_executable "/etc/local.d/update-issue.start" <<'EOF'
#!/bin/sh
set -e
hr(){
  echo "----------------------------------------------------------------------"
}
sed "/-----/,100d" -i /etc/issue || true
sed "/Link encap/,100d" -i /etc/issue || true
hr >> /etc/issue
/sbin/ifconfig | grep -vE '^lo ' | grep -EA2 '^[^ ]' >> /etc/issue
hr >> /etc/issue
EOF

apk upgrade --no-cache
apk add --no-cache curl docker openssh-server

DOCKER_COMPOSE_VERSION="$(curl -sSfL https://semver-version.deno.dev/api/github/docker/compose)"
curl -sSfL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" \
  | create_executable /usr/local/bin/docker-compose

enable_service local
enable_service sshd
enable_service docker
create_service docker-compose <<'EOF'
#!/sbin/openrc-run

name=$RC_SVCNAME
description="Docker Compose Application Service"

depend() {
	after docker
	need docker
}

checkconfig() {
  cd /appdata
  /usr/local/bin/docker-compose config --quiet
}

start_pre() {
  # If this isn't a restart, make sure that the user's config isn't
  # busted before we try to start the daemon (this will produce
  # better error messages than if we just try to start it blindly).
  #
  # If, on the other hand, this *is* a restart, then the stop_pre
  # action will have ensured that the config is usable and we don't
  # need to do that again.
  if [ "${RC_CMD}" != "restart" ] ; then
    checkconfig || return $?
  fi

  if ! docker info 2>/dev/null >/dev/null; then
    ebegin "Waiting for Docker daemon to be ready..."
    timeout 15 sh -c 'until docker info 2>/dev/null >/dev/null; do sleep 1; done;'
    if [ $? -eq 0 ]; then
      eend 0 "Docker daemon is ready"
    else
      eend 1 "Docker daemon is not ready"
    fi
  fi
}

stop_pre() {
  # If this is a restart, check to make sure the user's config
  # isn't busted before we stop the running daemon.
  if [ "${RC_CMD}" = "restart" ] ; then
      checkconfig || return $?
  fi
}

start() {
	ebegin "Starting $RC_SVCNAME"
	cd /appdata
	/usr/local/bin/docker-compose up --detach --remove-orphans --pull=always --wait
	eend $?
}

stop() {
	ebegin "Stopping $RC_SVCNAME"
	cd /appdata
	/usr/local/bin/docker-compose down
	eend $?
}
EOF

create_file_if_not_exists /appdata/docker-compose.yml <<'EOF'
services:
  app:
    image: docker.io/traefik/whoami
    environment:
      - PORT="80"
    ports: [ "80:80" ]
    # volumes:
    #   - /appdata/data:/data:ro    # left side is inside lxc, right is inside docker
EOF

extra_commands
